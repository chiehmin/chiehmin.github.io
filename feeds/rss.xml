<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>FatMinMin</title><link>https://fatminmin.com/</link><description>"A computer and a dream can take you anywhere."</description><atom:link href="https://fatminmin.com/feeds/rss.xml" rel="self"></atom:link><lastBuildDate>Wed, 14 Sep 2016 16:34:00 +0800</lastBuildDate><item><title>Deploying MinMinGuard using Travis CI</title><link>https://fatminmin.com/blog/deploying-mmg-using-travis.html</link><description>&lt;p&gt;I just learned and applied Travis CI to do continuous integration for MinMinGuard. For now, I am just using travis to automatically build release apk. The settings for travis is fairly easy to setup by just following the official tutorial. Following is my &lt;code&gt;.travis.yml&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;language&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;android&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;android&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;components&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;platform-tools&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tools&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build-tools-23.0.3&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;android-23&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;extra-google-google_play_services&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;extra-google-m2repository&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;extra-android-m2repository&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;addon-google_apis-google-19&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;jdk&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;oraclejdk8&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;script&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;./gradlew&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;assembleRelease&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;before_deploy&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
&lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mv app/build/outputs/apk/app-release.apk app/build/outputs/apk/MinMinGuard.apk&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;deploy&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;provider&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;releases&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;api_key&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;secure&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;my secure github oauth key&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;file&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app/build/outputs/apk/MinMinGuard.apk&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;skip_cleanup&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;on&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
    &lt;span class="l l-Scalar l-Scalar-Plain"&gt;tags&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because I only want travis to build the release apk for me, the script section needs to change to &lt;code&gt;./gradlew assembleRelease&lt;/code&gt; (The default one is &lt;code&gt;./gradlew build connectedCheck&lt;/code&gt; which is not what I want). The most important part is the deploy section and it can be automatically generated by using &lt;code&gt;travis setup releases&lt;/code&gt; command (&lt;code&gt;travis&lt;/code&gt; command line tool can be get from ruby gem). Then, whenever I push a new tag onto github, Travis CI will build the release apk and deploy it to the github release page automatically.&lt;/p&gt;
&lt;p&gt;The only hassle is to sign the apk without revealing my keystore password. After some searching, I changed my gradle file to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;android {
  signingConfigs {
    release {
      try {
        keyAlias &amp;#39;minminguard&amp;#39;
        keyPassword System.getenv(&amp;quot;KEYSTORE_PASS&amp;quot;) ?: System.console()?.readLine(&amp;quot;KeyStore password: &amp;quot;)
        storeFile file(&amp;#39;minminguard.keystore&amp;#39;)
        storePassword System.getenv(&amp;quot;KEY_PASS&amp;quot;) ?: System.console()?.readLine(&amp;quot;Key password: &amp;quot;)
      } catch (ex) {
          throw new InvalidUserDataException(&amp;quot;You should define KEYSTORE_PASS and KEY_PASS environment variables&amp;quot;)
      }
    }
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
      signingConfig signingConfigs.release
    }
    debug {}
  }
  // blablah
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When building on the Travis CI platform, the keystore and key password will be passed through the environment variables. The environment variables setting on Travis CI can be done in the setting panel easily:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Travis environment variable setting" src="https://fatminmin.com/images/travis_keystore_pass.png" /&gt;&lt;/p&gt;
&lt;p&gt;When no environment variable is set, I use the &lt;a href="http://docs.groovy-lang.org/latest/html/documentation/index.html#_elvis_operator"&gt;groovy's Elvis operator&lt;/a&gt; for detection and ask user to input the passwords instead:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Entering keystore password in command line" src="https://fatminmin.com/images/gradle_keystore_pass.png" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;System.console()?&lt;/code&gt; is used for null dection during gradle sync in the Android studio.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.travis-ci.com/user/languages/android"&gt;Travis CI: Building an Android Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.travis-ci.com/user/deployment/releases/"&gt;Travis CI: GitHub Releases Uploading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/29919066/what-is-the-best-practice-to-use-keystores-to-sign-release-version-of-an-android"&gt;Stack Overflow: What is the best practice to use keystores to sign release version of an Android app on Travis CI?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">FatMinMin</dc:creator><pubDate>Wed, 14 Sep 2016 16:34:00 +0800</pubDate><guid>tag:fatminmin.com,2016-09-14:blog/deploying-mmg-using-travis.html</guid></item><item><title>Writing Nautilus Scripts</title><link>https://fatminmin.com/blog/writing-nautilus-scripts.html</link><description>&lt;p&gt;I was trying to add a menu item to Nautilus context menu for easily converting encoding of a subtitle files. Because some default encodings of downloaded subtitles can not be accepted by the VLC player. I found there is a cool feature of Nautilus called nautilus script. Users can simply write and save a script into &lt;code&gt;/.local/share/nautilus/scripts&lt;/code&gt; and the script can be executed by simply clicking a menu item in Nautilus context menu.&lt;/p&gt;
&lt;p&gt;There are 4 environment variables Nautilus will set for ths cripts to get the information of current files/directories.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NAUTILUS_SCRIPT_SELECTED_FILE_PATHS:&lt;br /&gt;
    paths for selected files&lt;/li&gt;
&lt;li&gt;NAUTILUS_SCRIPT_SELECTED_URIS:&lt;br /&gt;
    URIs for selected files&lt;/li&gt;
&lt;li&gt;NAUTILUS_SCRIPT_CURRENT_URI:&lt;br /&gt;
    current location&lt;/li&gt;
&lt;li&gt;NAUTILUS_SCRIPT_WINDOW_GEOMETRY:&lt;br /&gt;
    position and size of current window&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, I simply wrote a ruby script to convert the encoding of selected files from simplified chinese/utf16 to traditional chinese/utf8 as following: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span class="c1"&gt;#log = open(&amp;#39;ruby.log&amp;#39;, &amp;#39;w&amp;#39;)&lt;/span&gt;

&lt;span class="n"&gt;paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;NAUTILUS_SCRIPT_SELECTED_FILE_PATHS&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="c1"&gt;#   log.print path + &amp;quot;\n&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;tmpPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.tmp&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;newPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dup&lt;/span&gt;
    &lt;span class="n"&gt;newPath&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;newPath&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rindex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.new&amp;quot;&lt;/span&gt;
    &lt;span class="sx"&gt;%x[ iconv -f utf16 -t gb2312//TRANSLIT &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;&amp;#39; | &lt;/span&gt;
&lt;span class="sx"&gt;        iconv -f gb2312 -t big5//TRANSLIT | &lt;/span&gt;
&lt;span class="sx"&gt;        iconv -f big5 -t utf8//TRANSLIT &amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tmpPath&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;&amp;#39; ]&lt;/span&gt;
    &lt;span class="sx"&gt;%x[ tr -d &amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="sx"&gt;&amp;#39; &amp;lt; &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tmpPath&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;&amp;#39; &amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;newPath&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;&amp;#39; ]&lt;/span&gt;  &lt;span class="c1"&gt;# converting CRLF to LF&lt;/span&gt;
    &lt;span class="sx"&gt;%x[ rm &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tmpPath&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sx"&gt;&amp;#39; ]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, I can easily execute the nautilus script by clicking the menu item in the context menu.&lt;/p&gt;
&lt;p&gt;&lt;img alt="script in context menu" src="https://fatminmin.com/images/script_context_menu.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.ubuntu.com/community/NautilusScriptsHowto"&gt;NautilusScriptsHowto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">FatMinMin</dc:creator><pubDate>Tue, 02 Aug 2016 13:38:00 +0800</pubDate><guid>tag:fatminmin.com,2016-08-02:blog/writing-nautilus-scripts.html</guid></item><item><title>Setting up Visual Studio Code for Simple C/C++ development</title><link>https://fatminmin.com/blog/settup-up-vscode.html</link><description>&lt;p&gt;I tried &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; the other day and I found it really good for simple coding jobs(ie. competing in hackerrank). Realtime symbol tagging and debugging can be done in vscode by installing cpptools plugins which makes vscode acting as a lightweight IDE for me. Here I will show how to set up the vscode for simple C/C++ development. The &lt;a href="https://blogs.msdn.microsoft.com/vcblog/2016/03/31/cc-extension-for-visual-studio-code/"&gt;tutorial in the official blog&lt;/a&gt; is a bit incomplete in my opion. &lt;/p&gt;
&lt;p&gt;We have to install &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools"&gt;cpptools&lt;/a&gt; and &lt;a href="https://marketplace.visualstudio.com/items?itemName=austin.code-gnu-global"&gt;C++ Intellisense&lt;/a&gt; first. In order to use C++ Intellisense, we have also to install &lt;a href="https://www.gnu.org/software/global/"&gt;GNU Global tools&lt;/a&gt;. (In fedora, I can simply install GNU Global tools by &lt;code&gt;dnf install global&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;Second thing is to make the &lt;strong&gt;code-editing aids&lt;/strong&gt; feature work, it does not automatically generate the browse.VC.db file on my Fedora 23. I have to press &lt;code&gt;F1&lt;/code&gt; to brings up the command palette and type &lt;code&gt;C/Cpp Edit configuration&lt;/code&gt;. It will open a &lt;code&gt;c_cpp_properties.json&lt;/code&gt; file and simply press &lt;code&gt;ctrl+s&lt;/code&gt; you can save it to the &lt;code&gt;.vscode&lt;/code&gt; folder under your project folder(You may need to point the &lt;code&gt;includePath&lt;/code&gt; to the correct path). After the generating the &lt;code&gt;c_cpp_properties.json&lt;/code&gt;, the symbol will start to be tagged and the &lt;strong&gt;code-editing aids&lt;/strong&gt; feature will work.&lt;/p&gt;
&lt;p&gt;The next thing is to generate the &lt;code&gt;task.json&lt;/code&gt; for automatic build after you press &lt;code&gt;ctrl+shift+b&lt;/code&gt;. The first time you press &lt;code&gt;ctrl+shift+b&lt;/code&gt; there will be a dialog prompt up asking you edit build configuration. Here I used the &lt;em&gt;other&lt;/em&gt; option to manualy use external command to build my code. The second element in the args array means using the current file name as the argument. After setting up the &lt;code&gt;task.json&lt;/code&gt;, we can build our code by simply pressing &lt;code&gt;ctrl+shift+b&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;command&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;g++&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;isShellCommand&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${file}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;showOutput&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;always&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last thing is to make debugging feature work. First time pressing &lt;code&gt;F5&lt;/code&gt; will generate a &lt;code&gt;launch.json&lt;/code&gt; under your &lt;code&gt;.vscode&lt;/code&gt; folter. Just pointing the &lt;code&gt;program&lt;/code&gt; attribute value to you &lt;code&gt;${workspaceRoot}/a.out&lt;/code&gt; then you are done(Because our &lt;code&gt;task.json&lt;/code&gt; use default output binary name for g++).&lt;/p&gt;
&lt;p&gt;After completing all the settings, you can now build the code by pressing &lt;code&gt;ctrl+shift+b&lt;/code&gt; and run it by pressing &lt;code&gt;F5&lt;/code&gt;. You can even set breakpoint and debug using the debug feature. The only on drawback is &lt;code&gt;cpptools&lt;/code&gt; plugin can not show the content of STL containers even though my GDB supports showing content of STL container. I hope showing STL containers content feature can be added into cpptools soon :).   &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">FatMinMin</dc:creator><pubDate>Mon, 13 Jun 2016 16:12:00 +0800</pubDate><guid>tag:fatminmin.com,2016-06-13:blog/settup-up-vscode.html</guid></item><item><title>HackerRank Game Theory Contest</title><link>https://fatminmin.com/blog/hackerrank-game-theory-contest.html</link><description>&lt;p&gt;Recently, I was trying to improve my problem solving skills, so I started practicing algorithm problems on Codeforces, HackerRank ...etc. The &lt;a href="https://www.hackerrank.com/contests/5-days-of-game-theory/challenges"&gt;Game Theory&lt;/a&gt; contest held by HackerRank is quite interesting. This is a great resource to learn combinatorial game theory step by step. Here I will write down the ideas of game theory I learned in the contest.&lt;/p&gt;
&lt;p&gt;The most interesting fact I learned is the &lt;a href="https://en.wikipedia.org/wiki/Sprague%E2%80%93Grundy_theorem"&gt;Sprague–Grundy theorem&lt;/a&gt; stating that every &lt;a href="https://en.wikipedia.org/wiki/Impartial_game"&gt;impartial game&lt;/a&gt; can be transformed into a &lt;a href="https://en.wikipedia.org/wiki/Nim"&gt;Nim Game&lt;/a&gt; by assigning every position in the game with a &lt;a href="https://en.wikipedia.org/wiki/Nimber"&gt;nimber&lt;/a&gt; (also called Grundy numbers).&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.hackerrank.com/contests/5-days-of-game-theory/challenges/day-2-nim-game"&gt;Nim Game&lt;/a&gt; and &lt;a href="https://www.hackerrank.com/contests/5-days-of-game-theory/challenges/misere-nim"&gt;Misere Nim&lt;/a&gt; are the two basic problems for understanding and practicing solving Nim Game.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.hackerrank.com/contests/5-days-of-game-theory/challenges/nimble"&gt;Nimble Game&lt;/a&gt; can be solved by some observations and transform into classic Nim Game easily. &lt;a href="https://www.hackerrank.com/contests/5-days-of-game-theory/challenges/day-2-poker-nim"&gt;Poker Nim&lt;/a&gt; teaches you adding does not effect the result because your opponent can counter it by reversing your move.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.hackerrank.com/contests/5-days-of-game-theory/challenges/a-chessboard-game"&gt;Chessboard Game, Again!&lt;/a&gt; is a very good problem for me to understand how to assign the &lt;em&gt;Grundy number&lt;/em&gt; to any impartial game. For every position in the chessboard, we can assign its grundy number by checking the its neighbors' grundy value first. The grundy number of its neighbors can be thought as a position of  stones in this pile after I make a move. The position with more stones than current position will not be considered because Poker Nim already teaches you adding does not effect the result. So we assign the grundy number to be the smallest non-negative value that does not contain in its neighbors' grundy value.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">FatMinMin</dc:creator><pubDate>Thu, 19 May 2016 19:36:00 +0800</pubDate><guid>tag:fatminmin.com,2016-05-19:blog/hackerrank-game-theory-contest.html</guid></item><item><title>Apktool, Dex2jar, jd-gui installation script</title><link>https://fatminmin.com/blog/android-decompilation-script.html</link><description>&lt;p&gt;I often switch between different computers and I found it really annoying to install apktool, dex2jar, jd-gui into every computers since they does not contain in the default repositories of Fedora, Ubuntu... etc. On Ubuntu I can just add the &lt;a href="https://launchpad.net/~backbox/+archive/ubuntu/four"&gt;BackBox ppa&lt;/a&gt;, however I does not find any similar working pentest yum repo for Fedora. So I wrote a script to automatically install those tools for my convenience to develop MinMinGuard.&lt;/p&gt;
&lt;p&gt;Here's the &lt;a href="https://gist.github.com/chiehmin/ddd954e8993b2492a0818b3b7b956970"&gt;script&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">FatMinMin</dc:creator><pubDate>Wed, 18 May 2016 14:54:00 +0800</pubDate><guid>tag:fatminmin.com,2016-05-18:blog/android-decompilation-script.html</guid></item><item><title>The World of GNOME</title><link>https://fatminmin.com/blog/world-of-gnome.html</link><description>&lt;p&gt;Recently, I was planning to apply GSOC 2016 for GNOME project. However, I am a bit too late for preparing the whole thing. Other active candidates already fixed plenty of bugs while I am still tracing the code of projects I am interested. Even though I have little chance of getting chosen, I still feel worthy for preparing all this. &lt;/p&gt;
&lt;p&gt;I am pretty amazed by the &lt;a href="https://wiki.gnome.org/action/show/Projects/GObjectIntrospection?action=show&amp;amp;redirect=GObjectIntrospection"&gt;GObject Introspection&lt;/a&gt; project. It allows other runtimes to access GTK, GLib and other GObject-based libraries effeciently. I am surprised that large portion of &lt;a href="https://en.wikipedia.org/wiki/GNOME_Shell"&gt;GNOME Shell&lt;/a&gt; is written with javascript but still have such wonderful animations and fluency. This is a &lt;a href="https://www.reddit.com/r/gnome/comments/l3gbu/gnome_3_why_javascript_and_not_python/"&gt;post&lt;/a&gt; explaining about why GNOME Shell choose javascript to create its UI.&lt;/p&gt;
&lt;p&gt;The project I am interested is GNOME Music which uses Python(PyGI) as its runtime. I wish to get scrolling lyrics feature for my daily used music player and I hope I can implement this feature by myself. The new goal for myself is to become a GNOME contributor. Hope I can finnaly submit some patch to it someday soon :)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.gnome.org/action/show/Projects/PyGObject?action=show&amp;amp;redirect=PyGObject"&gt;PyGObject (aka PyGI)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.gnome.org/gnome-devel-demos/stable/js.html.en"&gt;GNOME javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps: I become a Fedora user after having a lot of dependency issue when building GNOME apps on Ubuntu. And I found Fedora is a really nice distribution to use. It's package management tool &lt;code&gt;dnf&lt;/code&gt; is more easy to use than &lt;code&gt;apt-get&lt;/code&gt; and almost every package is at the newest version. Even though I have to fix some font and mp3 codec issue after installation(Because of some legal issue, Fedora does not include those by default), Fedora is still very nice to use and I really love it :). &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/Fedora/comments/3o6ijr/trying_fedora_23_for_the_first_time_why_do_fonts/"&gt;solution for ugly font issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ask.fedoraproject.org/en/question/42073/how-i-can-install-audio-codecs-like-mp3/"&gt;mp3 codec installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">FatMinMin</dc:creator><pubDate>Thu, 24 Mar 2016 13:56:00 +0800</pubDate><guid>tag:fatminmin.com,2016-03-24:blog/world-of-gnome.html</guid></item><item><title>Configuring NAT Network for VM</title><link>https://fatminmin.com/blog/qemu-nat.html</link><description>&lt;p&gt;I just went to a &lt;a href="http://hcsm.kktix.cc/events/160218"&gt;meetup&lt;/a&gt; talking about netfilter, conntrack and sip in Linux kernel. I used to use &lt;a href="https://virt-manager.org/"&gt;Virt-Manager&lt;/a&gt; to setup NAT+DHCP for me. I think it is a good time to practice setting up the NAT network and playing with iptables. So the following is my setting notes.&lt;/p&gt;
&lt;h2&gt;Create a tap device&lt;/h2&gt;
&lt;p&gt;TUN and TAP are virtual network devices. Here I create a &lt;code&gt;tap0&lt;/code&gt; device and set its ip to &lt;code&gt;192.168.123.1&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo tunctl -u fatminmin -t tap0
$ sudo ifconfig tap0 192.168.123.1 up
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configuring NAT with iptables&lt;/h2&gt;
&lt;p&gt;I enabled ip_forward feature and accept all forwarding packets send from/to tap0. Then, the most important thing to do is to set &lt;code&gt;MASQUERADE&lt;/code&gt; mode for SNAT and the NAT starts working after issuing &lt;code&gt;iptable-save&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /proc/sys/net/ipv4/ip_forward
$ sudo iptables -A FORWARD -i tap0 -j ACCEPT
$ sudo iptables -A FORWARD -o tap0 -j ACCEPT
$ sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
$ sudo iptables-save
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Starting VMs&lt;/h2&gt;
&lt;p&gt;Finally, I can just start the VM by specifying using tap0 as tap device and set up the ip settings in the VM manually.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo qemu-system-x86_64 --enable-kvm &lt;span class="se"&gt;\ &lt;/span&gt;                                                                                                                                                  
-smp &lt;span class="m"&gt;4&lt;/span&gt; -m &lt;span class="m"&gt;4096&lt;/span&gt; -cpu host -vga std &lt;span class="se"&gt;\&lt;/span&gt;
-drive &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./kali.img,if&lt;span class="o"&gt;=&lt;/span&gt;virtio &lt;span class="se"&gt;\&lt;/span&gt;
-net nic,model&lt;span class="o"&gt;=&lt;/span&gt;virtio -net tap,ifname&lt;span class="o"&gt;=&lt;/span&gt;tap0,script&lt;span class="o"&gt;=&lt;/span&gt;no &lt;span class="se"&gt;\&lt;/span&gt;
-boot d &lt;span class="se"&gt;\&lt;/span&gt;
-usbdevice tablet
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;IP settings in VM
 * IP: 192.168.123.100
 * Netmask: 255.255.255.0
 * Gateway: 192.168.123.1&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">FatMinMin</dc:creator><pubDate>Sat, 20 Feb 2016 21:15:00 +0800</pubDate><guid>tag:fatminmin.com,2016-02-20:blog/qemu-nat.html</guid></item><item><title>Install Remix OS using Android x86 Installer</title><link>https://fatminmin.com/blog/install-remix-os-to-disk.html</link><description>&lt;p&gt;I recently installed the popular desktop Android environment &lt;a href="http://www.jide.com/en/remixos"&gt;Remix OS&lt;/a&gt; into my usb disk. However I found the data partition(it is data.img actually) created by Remis OS installation process is soooo small! I can not even install HearthStone in it. And I don't know why it format the usb disk into fat32, ext4 should be better. &lt;/p&gt;
&lt;p&gt;I found actually I can invoke the traditional Android x86 installer that can help you install remix os into any disk, using ext4 and getting larger data partition. I can invoke it by simply adding &lt;code&gt;INSTALL=1&lt;/code&gt; into boot time parameter list. This parameter will be check by the initrd script as follow:&lt;/p&gt;
&lt;p&gt;&lt;img alt="android_x86_initrd" src="https://fatminmin.com/images/android_x86_initrd.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here I used QEMU/KVM and usb passthrough to install remix os into my 16GB usb disk.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;qemu-system-x86_64 --enable-kvm -boot d &lt;span class="se"&gt;\&lt;/span&gt;
-cdrom ./Remix_OS_for_PC_64_B2016011402_Alpha_Legacy.iso &lt;span class="se"&gt;\&lt;/span&gt;
-smp &lt;span class="m"&gt;4&lt;/span&gt; -m &lt;span class="m"&gt;4096&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
-vga std -usbdevice tablet -soundhw hda &lt;span class="se"&gt;\ &lt;/span&gt;
-usb -device usb-host,hostbus&lt;span class="o"&gt;=&lt;/span&gt;3,hostaddr&lt;span class="o"&gt;=&lt;/span&gt;8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, press tab to edit boot parameter at GRUB menu.&lt;/p&gt;
&lt;p&gt;&lt;img alt="grub_tab" src="https://fatminmin.com/images/grub_tab.png" /&gt;&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;INSTALL=1&lt;/code&gt; to the parameter list&lt;/p&gt;
&lt;p&gt;&lt;img alt="grub_edit" src="https://fatminmin.com/images/grub_edit.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here we get the traditional Android x86 installation program invoked. And I have to press &lt;em&gt;detect devices&lt;/em&gt; first to let the installation program to probe my usb device.&lt;/p&gt;
&lt;p&gt;&lt;img alt="android_x86_install" src="https://fatminmin.com/images/android_x86_install.png" /&gt;&lt;/p&gt;
&lt;p&gt;Create a partition and mark it as bootable.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fdisk" src="https://fatminmin.com/images/fdisk.png" /&gt;&lt;/p&gt;
&lt;p&gt;Select the partition just created.&lt;/p&gt;
&lt;p&gt;&lt;img alt="start_install" src="https://fatminmin.com/images/start_install.png" /&gt;&lt;/p&gt;
&lt;p&gt;Choose ext4 as disk format type and start the installation!&lt;/p&gt;
&lt;p&gt;&lt;img alt="installing" src="https://fatminmin.com/images/installing.png" /&gt;&lt;/p&gt;
&lt;p&gt;After installation is complete, I plugged my usb disk into my laptop and remix os is working great with ext4 and can access the full storage of my 16GB usb disk now.&lt;/p&gt;
&lt;p&gt;&lt;img alt="grub_remix" src="https://fatminmin.com/images/grub_remix.jpg" /&gt;
&lt;img alt="full_storage" src="https://fatminmin.com/images/full_storage.jpg" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">FatMinMin</dc:creator><pubDate>Mon, 25 Jan 2016 20:19:00 +0800</pubDate><guid>tag:fatminmin.com,2016-01-25:blog/install-remix-os-to-disk.html</guid></item><item><title>Installing Win10 with Virtio</title><link>https://fatminmin.com/blog/install-win10-with-virtio.html</link><description>&lt;p&gt;Here, I will record the steps of how I created a win10 virtual machine via QEMU/KVM command line with virtio drivers installed.  &lt;/p&gt;
&lt;p&gt;First, I created a disk image of &lt;em&gt;qcow2&lt;/em&gt; format and downloaded the virtio image from fedora's website.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create iso image&lt;/span&gt;
&amp;gt; $ qemu-img create -f qcow2 win10.img 30G  
Formatting &lt;span class="s1"&gt;&amp;#39;win10.img&amp;#39;&lt;/span&gt;, &lt;span class="nv"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;qcow2 &lt;span class="nv"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;32212254720&lt;/span&gt; &lt;span class="nv"&gt;encryption&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off &lt;span class="nv"&gt;cluster_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;65536&lt;/span&gt; &lt;span class="nv"&gt;lazy_refcounts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off &lt;span class="nv"&gt;refcount_bits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;16

&lt;span class="c1"&gt;# download latest virtio iso image&lt;/span&gt;
&amp;gt;$ wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/latest-virtio/virtio-win.iso
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, started the VM and began the installation process. Here, I specified the disk interface to be virtio.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;qemu-system-x86_64 --enable-kvm &lt;span class="se"&gt;\ &lt;/span&gt;
-smp &lt;span class="m"&gt;4&lt;/span&gt; -m &lt;span class="m"&gt;4096&lt;/span&gt; -cpu host -vga qxl &lt;span class="se"&gt;\&lt;/span&gt;
-drive &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./Sync/iso_images/win10.iso,index&lt;span class="o"&gt;=&lt;/span&gt;1,media&lt;span class="o"&gt;=&lt;/span&gt;cdrom &lt;span class="se"&gt;\&lt;/span&gt;
-drive &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./Sync/iso_images/virtio-win.iso,index&lt;span class="o"&gt;=&lt;/span&gt;2,media&lt;span class="o"&gt;=&lt;/span&gt;cdrom &lt;span class="se"&gt;\&lt;/span&gt;
-drive &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./win10.img,if&lt;span class="o"&gt;=&lt;/span&gt;virtio &lt;span class="se"&gt;\&lt;/span&gt;
 -net nic,model&lt;span class="o"&gt;=&lt;/span&gt;virtio,vlan&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; -net user
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Windows 10 does not have virtio driver builtin, so we have to install the virtio driver from the virtio-win.iso first.&lt;/p&gt;
&lt;p&gt;&lt;img alt="virtio_disk_driver" src="https://fatminmin.com/images/virtio_disk0.png" /&gt;&lt;/p&gt;
&lt;p&gt;There are a lot of pv drivers contain inside the virtio-win.iso. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NetKVM/: Virtio Network driver&lt;/li&gt;
&lt;li&gt;viostor/: Virtio Block driver&lt;/li&gt;
&lt;li&gt;vioscsi/: Virtio SCSI driver&lt;/li&gt;
&lt;li&gt;viorng/: Virtio RNG driver&lt;/li&gt;
&lt;li&gt;vioser/: Virtio serial driver&lt;/li&gt;
&lt;li&gt;Balloon/: Virtio Memory Balloon driver&lt;/li&gt;
&lt;li&gt;qxl/: QXL graphics driver for Windows 7 and earlier. (build virtio-win-0.1.103-1 and later)&lt;/li&gt;
&lt;li&gt;qxldod/: QXL graphics driver for Windows 8 and later. (build virtio-win-0.1.103-2 and later)&lt;/li&gt;
&lt;li&gt;pvpanic/: QEMU pvpanic device driver (build virtio-win-0.1.103-2 and later)&lt;/li&gt;
&lt;li&gt;guest-agent/: QEMU Guest Agent 32bit and 64bit MSI installers&lt;/li&gt;
&lt;li&gt;qemupciserial/: QEMU PCI serial device driver&lt;/li&gt;
&lt;li&gt;*.vfd: VFD floppy images for using during install of Windows XP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So here I selected the Virtio Block driver for win10.&lt;/p&gt;
&lt;p&gt;&lt;img alt="virtio_disk_driver" src="https://fatminmin.com/images/virtio_disk1.png" /&gt;&lt;/p&gt;
&lt;p&gt;Then, after the installation process completed. I have to installed the virtio driver for network and qxl vga driver.&lt;/p&gt;
&lt;p&gt;&lt;img alt="virtio_disk_driver" src="https://fatminmin.com/images/virtio_network.png" /&gt;
&lt;img alt="virtio_disk_driver" src="https://fatminmin.com/images/qxl.png" /&gt;&lt;/p&gt;
&lt;p&gt;Finally, the VM is ready to used :).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">FatMinMin</dc:creator><pubDate>Fri, 22 Jan 2016 16:34:00 +0800</pubDate><guid>tag:fatminmin.com,2016-01-22:blog/install-win10-with-virtio.html</guid></item><item><title>Running Win10 in QEMU/KVM</title><link>https://fatminmin.com/blog/run-win10-qemu-kvm.html</link><description>&lt;p&gt;I installed a win10 virtual machine using the &lt;a href="https://virt-manager.org/"&gt;Virt-Manager&lt;/a&gt;. However, when I switched to command line to launch the virtual machine. I found the win10 always showing me the following error message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; $ qemu-system-x86_64 --enable-kvm &lt;span class="se"&gt;\ &lt;/span&gt;
-drive &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./win10.img,if&lt;span class="o"&gt;=&lt;/span&gt;virtio &lt;span class="se"&gt;\&lt;/span&gt;
-smp &lt;span class="m"&gt;4&lt;/span&gt; -m &lt;span class="m"&gt;4096&lt;/span&gt; -vga qxl &lt;span class="se"&gt;\&lt;/span&gt;
-net nic,model&lt;span class="o"&gt;=&lt;/span&gt;virtio -net user &lt;span class="se"&gt;\&lt;/span&gt;
-soundhw hda
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="win10_error" src="https://fatminmin.com/images/win10_error.png" /&gt;&lt;/p&gt;
&lt;p&gt;After some trial and error, I found if I pass &lt;code&gt;-cpu host&lt;/code&gt; option (default is &lt;em&gt;qemu64&lt;/em&gt;), the win10 virtual machine can finally be successfully booted up! I think win10 may only allow whitelisted cpu model to run to prevent old cpu without advance features from running.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; $ qemu-system-x86_64 --enable-kvm &lt;span class="se"&gt;\&lt;/span&gt;
-drive &lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;./win10.img,if&lt;span class="o"&gt;=&lt;/span&gt;virtio &lt;span class="se"&gt;\&lt;/span&gt;
-smp &lt;span class="m"&gt;4&lt;/span&gt; -cpu host -m &lt;span class="m"&gt;4096&lt;/span&gt; -vga qxl &lt;span class="se"&gt;\&lt;/span&gt;
-net nic,model&lt;span class="o"&gt;=&lt;/span&gt;virtio -net user &lt;span class="se"&gt;\&lt;/span&gt;
-soundhw hda
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="win10" src="https://fatminmin.com/images/win10.png" /&gt;&lt;/p&gt;
&lt;p&gt;ps: The performance of win10 with &lt;em&gt;virtio driver&lt;/em&gt; is really amazing! I am very exciting to see virtio_gpu driver appearing on Windows platform.&lt;/p&gt;
&lt;p&gt;&lt;img alt="win10_performance" src="https://fatminmin.com/images/win10_performance.png" /&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">FatMinMin</dc:creator><pubDate>Thu, 21 Jan 2016 16:02:00 +0800</pubDate><guid>tag:fatminmin.com,2016-01-21:blog/run-win10-qemu-kvm.html</guid></item></channel></rss>